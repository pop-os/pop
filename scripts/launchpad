#!/usr/bin/env python3

import argparse
from debian.changelog import Version
from debian.deb822 import Deb822
from os import path
import sys

# Documentation can be found here: https://launchpad.net/+apidoc/devel.html
from launchpadlib.launchpad import Launchpad

from lib import foreach_repo

def launchpad():
    return Launchpad.login_with("pop-os/pop", "production", "scripts/__lpcache__", version="devel")

def launchpad_anon():
    return Launchpad.login_anonymously("pop-os/pop", "production", "scripts/__lpcache__", version="devel")

parser = argparse.ArgumentParser(description="Upload packages to proposed")
parser.add_argument("repos", nargs="*", default=[])
parser.add_argument("--check", action="store_true")
parser.add_argument("--dev", action="store_true")
parser.add_argument("--release", action="store_true")
parser.add_argument("--yes", action="store_true")
args = parser.parse_args(sys.argv[1:])

codenames = (
    "bionic",
    "focal",
    "hirsute",
    "impish",
)

if args.release:
    lp = launchpad()
else:
    lp = launchpad_anon()

if args.dev:
    owner = lp.people["system76-dev"]
    release_archive = owner.getPPAByName(name="stable")
    proposed_archive = owner.getPPAByName(name="pre-stable")
else:
    owner = lp.people["system76"]
    release_archive = owner.getPPAByName(name="pop")
    proposed_archive = owner.getPPAByName(name="proposed")

proposed_pending = {}
proposed_published = {}
release_pending = {}
release_published = {}
for codename in codenames:
    series = "https://api.launchpad.net/devel/ubuntu/" + codename
    proposed_pending[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Pending")
    proposed_published[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Published")
    release_pending[codename] = release_archive.getPublishedSources(distro_series=series, status="Pending")
    release_published[codename] = release_archive.getPublishedSources(distro_series=series, status="Published")

def find_proposed_published(source_name, codename):
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    return None

def find_proposed(source_name, codename):
    for pkg in proposed_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def find_release(source_name, codename):
    for pkg in release_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    for pkg in release_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg.source_package_version
    return None

def callback(repo):
    print("\x1B[1m" + repo["name"] + "\x1B[0m", flush=True)

    control_path = path.join(repo["name"], "debian", "control")
    if path.isfile(control_path):
        with open(control_path, "r") as fp:
            control = Deb822(fp)

        source_name = control.get("Source")

        for codename in codenames:
            print("  " + codename, flush=True)

            proposed_version = find_proposed(source_name, codename)
            release_version = find_release(source_name, codename)

            print("    proposed:", proposed_version, flush=True)
            print("    release:", release_version, flush=True)

            release_upload = False

            if proposed_version:
                pv = Version(proposed_version)
            else:
                print("    proposed version not found", flush=True)
                pv = Version("0")

            if release_version:
                rv = Version(release_version)
            else:
                print("    release version not found", flush=True)
                rv = Version("0")

            if pv == rv:
                print("    proposed and release versions are equal", flush=True)
            elif pv > rv:
                print("    proposed version is newer than release", flush=True)
                if "~~" in proposed_version:
                    print("    proposed version not ready to be released", flush=True)
                else:
                    release_upload = True
            elif pv < rv:
                print("    release version is newer than proposed", flush=True)

            if release_upload and not args.check and args.release:
                proposed_package = find_proposed_published(source_name, codename)
                if not proposed_package:
                    print("      Package not published in proposed!!!", flush=True)
                elif args.yes or input("      Upload release version (y/N)? ") == "y":
                    print("      Uploading to release", flush=True)
                    release_archive.copyPackage(
                        from_archive = proposed_archive,
                        include_binaries = True,
                        source_name = proposed_package.source_package_name,
                        to_pocket = proposed_package.pocket,
                        version = proposed_package.source_package_version
                    )
                else:
                    print("      Did not upload to release", flush=True)

        return source_name

results = foreach_repo(callback, args.repos, args.dev)

bold = "\x1B[1m"
reset = "\x1B[0m"

if args.check:
    print(bold + "Checking published packages" + reset)
    for codename in codenames:
        print("  " + codename, flush=True)

        if args.release:
            pkgs = proposed_published[codename]
        else:
            pkgs = release_published[codename]

        for pkg in pkgs:
            repo_name = None
            for result in results:
                if pkg.source_package_name == results[result]:
                    repo_name = result
                    break

            if args.release:
                other_version = find_release(pkg.source_package_name, codename)
            else:
                other_version = find_proposed(pkg.source_package_name, codename)

            if repo_name:
                print("    " + pkg.source_package_name + " " + pkg.source_package_version)
            else:
                print("    " + bold + pkg.source_package_name + " " + pkg.source_package_version + reset)

            if not other_version:
                if args.release:
                    print("      " + bold + "not released" + reset)
                else:
                    print("      " + bold + "not proposed" + reset)
            elif other_version != pkg.source_package_version:
                print("      " + bold + other_version + reset)
