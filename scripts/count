#!/usr/bin/env python3

import argparse
from debian.changelog import Version
from debian.deb822 import Deb822, Sources
from os import path
import shutil
from subprocess import check_call
import sys

from lib import foreach_repo, launchpad, launchpad_anon

parser = argparse.ArgumentParser(description="Upload packages to proposed")
parser.add_argument("repos", nargs="*", default=[])
parser.add_argument("--dev", action="store_true")
args = parser.parse_args(sys.argv[1:])

codenames = (
    "bionic",
    "focal",
    "hirsute",
    "impish",
)

lp = launchpad_anon()

if args.dev:
    owner = lp.people["system76-dev"]
    release_archive = owner.getPPAByName(name="stable")
    proposed_archive = owner.getPPAByName(name="pre-stable")
else:
    owner = lp.people["system76"]
    release_archive = owner.getPPAByName(name="pop")
    proposed_archive = owner.getPPAByName(name="proposed")

proposed_pending = {}
proposed_published = {}
release_pending = {}
release_published = {}
for codename in codenames:
    series = "https://api.launchpad.net/devel/ubuntu/" + codename
    proposed_pending[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Pending")
    proposed_published[codename] = proposed_archive.getPublishedSources(distro_series=series, status="Published")
    release_pending[codename] = release_archive.getPublishedSources(distro_series=series, status="Pending")
    release_published[codename] = release_archive.getPublishedSources(distro_series=series, status="Published")

def find_proposed(source_name, codename):
    for pkg in proposed_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    for pkg in proposed_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    return None

def find_release(source_name, codename):
    for pkg in release_pending[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    for pkg in release_published[codename]:
        if pkg.source_package_name == source_name:
            return pkg
    return None

def callback(repo):
    print("\x1B[1m" + repo["name"] + "\x1B[0m", flush=True)

    control_path = path.join(repo["name"], "debian", "control")
    if path.isfile(control_path):
        with open(control_path, "r") as fp:
            control = Deb822(fp)

        source_name = control.get("Source")

        for codename in codenames:
            arch_series = "https://api.launchpad.net/devel/ubuntu/" + codename + "/amd64"

            print("  " + codename, flush=True)

            proposed_pkg = find_proposed(source_name, codename)
            release_pkg = find_release(source_name, codename)

            if proposed_pkg:
                print("    proposed", flush=True)
                for binary in proposed_pkg.getPublishedBinaries():
                    if binary.distro_arch_series_link == arch_series:
                        print("      " + binary.binary_package_name, binary.binary_package_version, binary.getDownloadCount())

            if release_pkg:
                print("    release", flush=True)
                for binary in release_pkg.getPublishedBinaries():
                    if binary.distro_arch_series_link == arch_series:
                        print("      " + binary.binary_package_name, binary.binary_package_version, binary.getDownloadCount())

results = foreach_repo(callback, args.repos, args.dev)
